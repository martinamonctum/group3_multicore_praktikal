  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
curl: (7) Failed to connect to 127.0.0.1 port 1885: Connection refused
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
curl: (7) Failed to connect to 127.0.0.1 port 1885: Connection refused
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Peak bandwidth measurement started.
vtune: Peak bandwidth measurement finished.
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /dss/dsshome1/0E/h039vac/heatdir/VtuneData/MemoryAccess -command stop.
Resolutions       : (3200, 4200, ... 3200)
Iterations        : 200
Algorithm         : 0 (Jacobi)
Num. Heat sources : 2
   1: (0.00, 0.00) 1.00 1.00 
   2: (1.00, 1.00) 1.00 0.50 
Resolution:  3200Resolution:  3200, Time: 2.845 (22528.000 GFlop => 7917.99 MFlop/s, residual 0.047071, 200 iterations)
166.796786
52.104446
27.353480
17.461956
12.368776
9.346810
7.382413
6.021266
5.032470
4.287525
3.709818
3.251127
2.879746
2.574056
2.318868
2.103225
1.919051
1.760271
1.622241
1.501352
1.394765
1.300220
1.215893
1.140304
1.072234
1.010677
0.954793
0.903875
0.857327
0.814642
0.775385
0.739183
0.705713
0.674694
0.645883
0.619066
0.594054
0.570683
0.548804
0.528289
0.509021
0.490896
0.473822
0.457715
0.442500
0.428111
0.414484
0.401565
0.389304
0.377654
0.366574
0.356025
0.345973
0.336385
0.327232
0.318486
0.310123
0.302120
0.294455
0.287109
0.280064
0.273302
0.266807
0.260566
0.254565
0.248790
0.243231
0.237875
0.232713
0.227735
0.222932
0.218296
0.213818
0.209491
0.205308
0.201263
0.197348
0.193559
0.189890
0.186335
0.182890
0.179549
0.176309
0.173165
0.170114
0.167151
0.164273
0.161477
0.158759
0.156117
0.153547
0.151047
0.148614
0.146246
0.143939
0.141693
0.139505
0.137372
0.135293
0.133267
0.131290
0.129361
0.127480
0.125643
0.123850
0.122100
0.120390
0.118720
0.117088
0.115493
0.113934
0.112410
0.110919
0.109461
0.108035
0.106640
0.105274
0.103937
0.102628
0.101347
0.100092
0.098862
0.097658
0.096478
0.095321
0.094187
0.093076
0.091986
0.090918
0.089869
0.088841
0.087833
0.086843
0.085872
0.084918
0.083983
0.083064
0.082162
0.081276
0.080406
0.079551
0.078712
0.077887
0.077076
0.076279
0.075496
0.074727
0.073970
0.073226
0.072494
0.071775
0.071067
0.070371
0.069686
0.069012
0.068349
0.067696
0.067054
0.066422
0.065800
0.065187
0.064584
0.063990
0.063405
0.062829
0.062262
0.061703
0.061152
0.060610
0.060076
0.059549
0.059030
0.058519
0.058014
0.057518
0.057028
0.056545
0.056068
0.055599
0.055136
0.054679
0.054229
0.053785
0.053346
0.052914
0.052488
0.052067
0.051652
0.051242
0.050838
0.050439
0.050045
0.049656
0.049273
0.048894
0.048520
0.048151
0.047786
0.047426
0.047071
 3200; 2.845; 7917.988
vtune: Collection stopped.
vtune: Using result path `/dss/dsshome1/0E/h039vac/heatdir/VtuneData/MemoryAccess'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-807493-i01r01c01s01.sc' vtune: Executing actions 12 % Loading 'systemcollector-807493-i01r01c01s01.sc' vtune: Executing actions 12 % Loading 'system-wide.perf' file                  vtune: Executing actions 12 % Loading 'system-wide.stat.perf' file             vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `heat'                 vtune: Executing actions 20 % Resolving information for `heat'                 vtune: Executing actions 20 % Resolving information for `libc-2.31.so'         
vtune: Warning: Cannot locate debugging information for file `/lib64/libc-2.31.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.31.so'         vtune: Executing actions 22 % Resolving information for `libc-2.31.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 24 % Resolving interrupt name information             vtune: Executing actions 26 % Resolving interrupt name information             vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 31 % Preparing output tree                            vtune: Executing actions 31 % Parsing columns in input tree                    vtune: Executing actions 32 % Parsing columns in input tree                    vtune: Executing actions 32 % Creating top-level columns                       vtune: Executing actions 32 % Creating top-level rows                          vtune: Executing actions 33 % Creating top-level rows                          vtune: Executing actions 33 % Preparing output tree                            vtune: Executing actions 33 % Parsing columns in input tree                    vtune: Executing actions 33 % Creating top-level columns                       vtune: Executing actions 34 % Creating top-level columns                       vtune: Executing actions 34 % Creating top-level rows                          vtune: Executing actions 35 % Creating top-level rows                          vtune: Executing actions 36 % Creating top-level rows                          vtune: Executing actions 37 % Creating top-level rows                          vtune: Executing actions 37 % Preparing output tree                            vtune: Executing actions 37 % Parsing columns in input tree                    vtune: Executing actions 37 % Creating top-level columns                       vtune: Executing actions 38 % Creating top-level columns                       vtune: Executing actions 38 % Creating top-level rows                          vtune: Executing actions 39 % Creating top-level rows                          vtune: Executing actions 39 % Preparing output tree                            vtune: Executing actions 39 % Parsing columns in input tree                    vtune: Executing actions 39 % Creating top-level columns                       vtune: Executing actions 39 % Creating top-level rows                          vtune: Executing actions 40 % Creating top-level rows                          vtune: Executing actions 40 % Preparing output tree                            vtune: Executing actions 40 % Parsing columns in input tree                    vtune: Executing actions 40 % Creating top-level columns                       vtune: Executing actions 41 % Creating top-level columns                       vtune: Executing actions 41 % Creating top-level rows                          vtune: Executing actions 42 % Creating top-level rows                          vtune: Executing actions 42 % Preparing output tree                            vtune: Executing actions 42 % Parsing columns in input tree                    vtune: Executing actions 42 % Creating top-level columns                       vtune: Executing actions 43 % Creating top-level columns                       vtune: Executing actions 43 % Creating top-level rows                          vtune: Executing actions 44 % Creating top-level rows                          vtune: Executing actions 44 % Preparing output tree                            vtune: Executing actions 44 % Parsing columns in input tree                    vtune: Executing actions 44 % Creating top-level columns                       vtune: Executing actions 45 % Creating top-level columns                       vtune: Executing actions 45 % Creating top-level rows                          vtune: Executing actions 46 % Creating top-level rows                          vtune: Executing actions 46 % Preparing output tree                            vtune: Executing actions 46 % Parsing columns in input tree                    vtune: Executing actions 46 % Creating top-level columns                       vtune: Executing actions 46 % Creating top-level rows                          vtune: Executing actions 47 % Creating top-level rows                          vtune: Executing actions 47 % Preparing output tree                            vtune: Executing actions 47 % Parsing columns in input tree                    vtune: Executing actions 48 % Parsing columns in input tree                    vtune: Executing actions 48 % Creating top-level columns                       vtune: Executing actions 48 % Creating top-level rows                          vtune: Executing actions 49 % Creating top-level rows                          vtune: Executing actions 49 % Preparing output tree                            vtune: Executing actions 49 % Parsing columns in input tree                    vtune: Executing actions 49 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Preparing output tree                            vtune: Executing actions 50 % Parsing columns in input tree                    vtune: Executing actions 50 % Creating top-level columns                       vtune: Executing actions 50 % Creating top-level rows                          vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 50 % Precomputing frequently used data                vtune: Executing actions 50 % Precomputing frequently used data                vtune: Executing actions 50 % Updating precomputed scalar metrics              vtune: Executing actions 50 % Discarding redundant overtime data               vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 3.135s
    CPU Time: 3.096s
    Memory Bound: 43.2% of Pipeline Slots
     | The metric value is high. This may indicate that a significant fraction
     | of execution pipeline slots could be stalled due to demand memory load
     | and stores. Explore the metric breakdown by memory hierarchy, memory
     | bandwidth information, and correlation by memory objects.
     |
        L1 Bound: 4.3% of Clockticks
        L2 Bound: 10.5% of Clockticks
         | This metric shows how often machine was stalled on L2 cache. Avoiding
         | cache misses (L1 misses/L2 hits) will improve the latency and
         | increase performance.
         |
        L3 Bound: 0.0% of Clockticks
        DRAM Bound: 19.3% of Clockticks
         | This metric shows how often CPU was stalled on the main memory
         | (DRAM). Caching typically improves the latency and increases
         | performance.
         |
            DRAM Bandwidth Bound: 0.0% of Elapsed Time
        Store Bound: 4.3% of Clockticks
        NUMA: % of Remote Accesses: 0.0%
        UPI Utilization Bound: 0.0% of Elapsed Time
    Loads: 2,969,126,082
    Stores: 761,121,153
    LLC Miss Count: 15,072,308
        Local DRAM Access Count: 15,072,308
        Remote DRAM Access Count: 0
        Remote Cache Access Count: 0
    Average Latency (cycles): 71
    Total Thread Count: 1
    Paused Time: 0s

Bandwidth Utilization
Bandwidth Domain                  Platform Maximum  Observed Maximum  Average  % of Elapsed Time with High BW Utilization(%)
--------------------------------  ----------------  ----------------  -------  ---------------------------------------------
DRAM, GB/sec                      228                         15.800   13.637                                           0.0%
DRAM Single-Package, GB/sec       114                         15.800   13.589                                           0.0%
UPI Utilization Single-link, (%)  100                          3.300    0.096                                           0.0%
Collection and Platform Info
    Application Command Line: ./heat "test.dat" 
    Operating System: 5.3.18-150300.59.63-default NAME="SLES" VERSION="15-SP3" VERSION_ID="15.3" PRETTY_NAME="SUSE Linux Enterprise Server 15 SP3" ID="sles" ID_LIKE="suse" ANSI_COLOR="0;32" CPE_NAME="cpe:/o:suse:sles:15:sp3" DOCUMENTATION_URL="https://documentation.suse.com/"
    Computer Name: i01r01c01s01
    Result Size: 13.6 MB 
    Collection start time: 18:48:52 03/05/2024 UTC
    Collection stop time: 18:48:55 03/05/2024 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Skylake
        Frequency: 2.694 GHz 
        Logical CPU Count: 96
        Max DRAM Single-Package Bandwidth: 114.000 GB/s
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /dss/dsshome1/0E/h039vac/heatdir/VtuneData/MicroArchitecture -command stop.
Resolutions       : (3200, 4200, ... 3200)
Iterations        : 200
Algorithm         : 0 (Jacobi)
Num. Heat sources : 2
   1: (0.00, 0.00) 1.00 1.00 
   2: (1.00, 1.00) 1.00 0.50 
Resolution:  3200Resolution:  3200, Time: 2.803 (22528.000 GFlop => 8036.48 MFlop/s, residual 0.047071, 200 iterations)
166.796786
52.104446
27.353480
17.461956
12.368776
9.346810
7.382413
6.021266
5.032470
4.287525
3.709818
3.251127
2.879746
2.574056
2.318868
2.103225
1.919051
1.760271
1.622241
1.501352
1.394765
1.300220
1.215893
1.140304
1.072234
1.010677
0.954793
0.903875
0.857327
0.814642
0.775385
0.739183
0.705713
0.674694
0.645883
0.619066
0.594054
0.570683
0.548804
0.528289
0.509021
0.490896
0.473822
0.457715
0.442500
0.428111
0.414484
0.401565
0.389304
0.377654
0.366574
0.356025
0.345973
0.336385
0.327232
0.318486
0.310123
0.302120
0.294455
0.287109
0.280064
0.273302
0.266807
0.260566
0.254565
0.248790
0.243231
0.237875
0.232713
0.227735
0.222932
0.218296
0.213818
0.209491
0.205308
0.201263
0.197348
0.193559
0.189890
0.186335
0.182890
0.179549
0.176309
0.173165
0.170114
0.167151
0.164273
0.161477
0.158759
0.156117
0.153547
0.151047
0.148614
0.146246
0.143939
0.141693
0.139505
0.137372
0.135293
0.133267
0.131290
0.129361
0.127480
0.125643
0.123850
0.122100
0.120390
0.118720
0.117088
0.115493
0.113934
0.112410
0.110919
0.109461
0.108035
0.106640
0.105274
0.103937
0.102628
0.101347
0.100092
0.098862
0.097658
0.096478
0.095321
0.094187
0.093076
0.091986
0.090918
0.089869
0.088841
0.087833
0.086843
0.085872
0.084918
0.083983
0.083064
0.082162
0.081276
0.080406
0.079551
0.078712
0.077887
0.077076
0.076279
0.075496
0.074727
0.073970
0.073226
0.072494
0.071775
0.071067
0.070371
0.069686
0.069012
0.068349
0.067696
0.067054
0.066422
0.065800
0.065187
0.064584
0.063990
0.063405
0.062829
0.062262
0.061703
0.061152
0.060610
0.060076
0.059549
0.059030
0.058519
0.058014
0.057518
0.057028
0.056545
0.056068
0.055599
0.055136
0.054679
0.054229
0.053785
0.053346
0.052914
0.052488
0.052067
0.051652
0.051242
0.050838
0.050439
0.050045
0.049656
0.049273
0.048894
0.048520
0.048151
0.047786
0.047426
0.047071
 3200; 2.803; 8036.478
vtune: Collection stopped.
vtune: Using result path `/dss/dsshome1/0E/h039vac/heatdir/VtuneData/MicroArchitecture'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-807829-i01r01c01s01.sc' vtune: Executing actions 12 % Loading 'systemcollector-807829-i01r01c01s01.sc' vtune: Executing actions 12 % Loading 'system-wide.perf' file                  vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `heat'                 vtune: Executing actions 20 % Resolving information for `heat'                 vtune: Executing actions 20 % Resolving information for `libc-2.31.so'         
vtune: Warning: Cannot locate debugging information for file `/lib64/libc-2.31.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.31.so'         vtune: Executing actions 22 % Resolving information for `libc-2.31.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 24 % Resolving interrupt name information             vtune: Executing actions 26 % Resolving interrupt name information             vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 3.077s
    Clockticks: 6,990,500,000
    Instructions Retired: 10,307,500,000
    CPI Rate: 0.678
    Retiring: 39.4% of Pipeline Slots
        Light Operations: 29.9% of Pipeline Slots
            FP Arithmetic: 32.6% of uOps
                FP x87: 0.0% of uOps
                FP Scalar: 0.0% of uOps
                FP Vector: 32.6% of uOps
            Other: 67.4% of uOps
        Heavy Operations: 9.5% of Pipeline Slots
            Microcode Sequencer: 0.0% of Pipeline Slots
                Assists: 0.0% of Pipeline Slots
    Front-End Bound: 3.4% of Pipeline Slots
        Front-End Latency: 0.0% of Pipeline Slots
            ICache Misses: 0.0% of Clockticks
            ITLB Overhead: 0.0% of Clockticks
            Branch Resteers: 0.0% of Clockticks
                Mispredicts Resteers: 0.0% of Clockticks
                Clears Resteers: 0.0% of Clockticks
                Unknown Branches: 0.0% of Clockticks
            DSB Switches: 16.0% of Clockticks
            Length Changing Prefixes: 0.0% of Clockticks
            MS Switches: 0.0% of Clockticks
        Front-End Bandwidth: 3.4% of Pipeline Slots
            Front-End Bandwidth MITE: 5.1% of Pipeline Slots
            Front-End Bandwidth DSB: 1.7% of Pipeline Slots
            (Info) DSB Coverage: 62.9%
    Bad Speculation: 0.0% of Pipeline Slots
        Branch Mispredict: 0.0% of Pipeline Slots
        Machine Clears: 0.0% of Pipeline Slots
    Back-End Bound: 58.9% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 35.6% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 0.0% of Clockticks
                DTLB Overhead: 0.0% of Clockticks
                    Load STLB Hit: 0.0% of Clockticks
                    Load STLB Miss: 0.0% of Clockticks
                Loads Blocked by Store Forwarding: 0.0% of Clockticks
                Lock Latency: 0.0% of Clockticks
                Split Loads: 3.5% of Clockticks
                4K Aliasing: 8.6% of Clockticks
                FB Full: 100.0% of Clockticks
            L2 Bound: 8.4% of Clockticks
             | This metric shows how often machine was stalled on L2 cache.
             | Avoiding cache misses (L1 misses/L2 hits) will improve the
             | latency and increase performance.
             |
            L3 Bound: 4.0% of Clockticks
                Contested Accesses: 0.0% of Clockticks
                Data Sharing: 0.0% of Clockticks
                L3 Latency: 0.0% of Clockticks
                SQ Full: 10.3% of Clockticks
            DRAM Bound: 15.6% of Clockticks
             | This metric shows how often CPU was stalled on the main memory
             | (DRAM). Caching typically improves the latency and increases
             | performance.
             |
                Memory Bandwidth: 60.0% of Clockticks
                 | Issue: A significant fraction of cycles was stalled due to
                 | approaching bandwidth limits of the main memory (DRAM).
                 | 
                 | Tips: Improve data accesses to reduce cacheline transfers
                 | from/to memory using these possible techniques:
                 |     - Consume all bytes of each cacheline before it is
                 |       evicted (for example, reorder structure elements and
                 |       split non-hot ones).
                 |     - Merge compute-limited and bandwidth-limited loops.
                 |     - Use NUMA optimizations on a multi-socket system.
                 | 
                 | Note: software prefetches do not help a bandwidth-limited
                 | application.
                 |
                Memory Latency: 24.0% of Clockticks
                 | Issue: A significant fraction of cycles was stalled due to
                 | the latency of the main memory (DRAM).
                 | 
                 | Tips: Improve data accesses or interleave them with compute
                 | using such possible techniques as data layout re-structuring
                 | or software prefetches (through the compiler).
                 |
                    Local DRAM: 71.6% of Clockticks
                     | The number of CPU stalls on loads from the local memory
                     | exceeds the threshold. Consider caching data to improve
                     | the latency and increase the performance.
                     |
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 0.0% of Clockticks
                Store Latency: 77.6% of Clockticks
                False Sharing: 0.0% of Clockticks
                Split Stores: 0.0% of Clockticks
                DTLB Store Overhead: 0.0% of Clockticks
                    Store STLB Hit: 0.0% of Clockticks
                    Store STLB Hit: 0.0% of Clockticks
        Core Bound: 23.3% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
            Divider: 0.0% of Clockticks
            Port Utilization: 18.3% of Clockticks
                Cycles of 0 Ports Utilized: 13.7% of Clockticks
                    Serializing Operations: 0.0% of Clockticks
                    Mixing Vectors: 0.0% of uOps
                Cycles of 1 Port Utilized: 8.6% of Clockticks
                Cycles of 2 Ports Utilized: 5.1% of Clockticks
                Cycles of 3+ Ports Utilized: 15.4% of Clockticks
                    ALU Operation Utilization: 23.1% of Clockticks
                        Port 0: 24.0% of Clockticks
                        Port 1: 17.1% of Clockticks
                        Port 5: 24.0% of Clockticks
                        Port 6: 27.4% of Clockticks
                    Load Operation Utilization: 15.4% of Clockticks
                        Port 2: 17.1% of Clockticks
                        Port 3: 17.1% of Clockticks
                    Store Operation Utilization: 6.9% of Clockticks
                        Port 4: 6.9% of Clockticks
                        Port 7: 3.4% of Clockticks
                Vector Capacity Usage (FPU): 50.0%
                 | Vector Capacity Usage is low, which usually indicates the use
                 | of floating point scalar instructions or vector instructions
                 | with partial vector capacity. Explore the instruction mix
                 | breakdown to learn more about vectorized code.
                 |
    Average CPU Frequency: 2.288 GHz 
    Total Thread Count: 1
    Paused Time: 0s
Effective Physical Core Utilization: 2.4% (1.158 out of 48)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.0% (0.993 out of 96)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: ./heat "test.dat" 
    Operating System: 5.3.18-150300.59.63-default NAME="SLES" VERSION="15-SP3" VERSION_ID="15.3" PRETTY_NAME="SUSE Linux Enterprise Server 15 SP3" ID="sles" ID_LIKE="suse" ANSI_COLOR="0;32" CPE_NAME="cpe:/o:suse:sles:15:sp3" DOCUMENTATION_URL="https://documentation.suse.com/"
    Computer Name: i01r01c01s01
    Result Size: 5.3 MB 
    Collection start time: 18:49:06 03/05/2024 UTC
    Collection stop time: 18:49:09 03/05/2024 UTC
    Collector Type: Driverless Perf system-wide sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Skylake
        Frequency: 2.694 GHz 
        Logical CPU Count: 96
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /dss/dsshome1/0E/h039vac/heatdir/VtuneData/Hotspots -command stop.
Resolutions       : (3200, 4200, ... 3200)
Iterations        : 200
Algorithm         : 0 (Jacobi)
Num. Heat sources : 2
   1: (0.00, 0.00) 1.00 1.00 
   2: (1.00, 1.00) 1.00 0.50 
Resolution:  3200Resolution:  3200, Time: 2.734 (22528.000 GFlop => 8240.95 MFlop/s, residual 0.047071, 200 iterations)
166.796786
52.104446
27.353480
17.461956
12.368776
9.346810
7.382413
6.021266
5.032470
4.287525
3.709818
3.251127
2.879746
2.574056
2.318868
2.103225
1.919051
1.760271
1.622241
1.501352
1.394765
1.300220
1.215893
1.140304
1.072234
1.010677
0.954793
0.903875
0.857327
0.814642
0.775385
0.739183
0.705713
0.674694
0.645883
0.619066
0.594054
0.570683
0.548804
0.528289
0.509021
0.490896
0.473822
0.457715
0.442500
0.428111
0.414484
0.401565
0.389304
0.377654
0.366574
0.356025
0.345973
0.336385
0.327232
0.318486
0.310123
0.302120
0.294455
0.287109
0.280064
0.273302
0.266807
0.260566
0.254565
0.248790
0.243231
0.237875
0.232713
0.227735
0.222932
0.218296
0.213818
0.209491
0.205308
0.201263
0.197348
0.193559
0.189890
0.186335
0.182890
0.179549
0.176309
0.173165
0.170114
0.167151
0.164273
0.161477
0.158759
0.156117
0.153547
0.151047
0.148614
0.146246
0.143939
0.141693
0.139505
0.137372
0.135293
0.133267
0.131290
0.129361
0.127480
0.125643
0.123850
0.122100
0.120390
0.118720
0.117088
0.115493
0.113934
0.112410
0.110919
0.109461
0.108035
0.106640
0.105274
0.103937
0.102628
0.101347
0.100092
0.098862
0.097658
0.096478
0.095321
0.094187
0.093076
0.091986
0.090918
0.089869
0.088841
0.087833
0.086843
0.085872
0.084918
0.083983
0.083064
0.082162
0.081276
0.080406
0.079551
0.078712
0.077887
0.077076
0.076279
0.075496
0.074727
0.073970
0.073226
0.072494
0.071775
0.071067
0.070371
0.069686
0.069012
0.068349
0.067696
0.067054
0.066422
0.065800
0.065187
0.064584
0.063990
0.063405
0.062829
0.062262
0.061703
0.061152
0.060610
0.060076
0.059549
0.059030
0.058519
0.058014
0.057518
0.057028
0.056545
0.056068
0.055599
0.055136
0.054679
0.054229
0.053785
0.053346
0.052914
0.052488
0.052067
0.051652
0.051242
0.050838
0.050439
0.050045
0.049656
0.049273
0.048894
0.048520
0.048151
0.047786
0.047426
0.047071
 3200; 2.734; 8240.954
vtune: Collection stopped.
vtune: Using result path `/dss/dsshome1/0E/h039vac/heatdir/VtuneData/Hotspots'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-808084-i01r01c01s01.sc' vtune: Executing actions 12 % Loading 'systemcollector-808084-i01r01c01s01.sc' vtune: Executing actions 12 % Loading '808094.stat.perf' file                  vtune: Executing actions 12 % Loading '808084-808094.0.trace' file             vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `heat'                 vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 22 % Resolving information for `libc.so.6'            vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 24 % Resolving interrupt name information             vtune: Executing actions 26 % Resolving interrupt name information             vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 3.175s
    CPU Time: 2.980s
        Effective Time: 2.980s
            Idle: 0s
            Poor: 2.980s
            Ok: 0s
            Ideal: 0s
            Over: 0s
        Spin Time: 0s
        Overhead Time: 0s
    Total Thread Count: 1
    Paused Time: 0s

Top Hotspots
Function      Module     CPU Time
------------  ---------  --------
relax_jacobi  heat         2.740s
_IO_fprintf   libc.so.6    0.188s
initialize    heat         0.020s
main          heat         0.020s
write_image   heat         0.012s
Effective Physical Core Utilization: 2.1% (0.996 out of 48)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.0% (0.996 out of 96)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Collection and Platform Info
    Application Command Line: ./heat "test.dat" 
    Operating System: 5.3.18-150300.59.63-default NAME="SLES" VERSION="15-SP3" VERSION_ID="15.3" PRETTY_NAME="SUSE Linux Enterprise Server 15 SP3" ID="sles" ID_LIKE="suse" ANSI_COLOR="0;32" CPE_NAME="cpe:/o:suse:sles:15:sp3" DOCUMENTATION_URL="https://documentation.suse.com/"
    Computer Name: i01r01c01s01
    Result Size: 3.7 MB 
    Collection start time: 18:49:16 03/05/2024 UTC
    Collection stop time: 18:49:19 03/05/2024 UTC
    Collector Type: Driverless Perf per-process counting,User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Skylake
        Frequency: 2.694 GHz 
        Logical CPU Count: 96
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
vtune: Peak bandwidth measurement started.
vtune: Peak bandwidth measurement finished.
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /dss/dsshome1/0E/h039vac/heatdir/VtuneData/PerformanceSnapshot -command stop.
Resolutions       : (3200, 4200, ... 3200)
Iterations        : 200
Algorithm         : 0 (Jacobi)
Num. Heat sources : 2
   1: (0.00, 0.00) 1.00 1.00 
   2: (1.00, 1.00) 1.00 0.50 
Resolution:  3200Resolution:  3200, Time: 2.754 (22528.000 GFlop => 8181.16 MFlop/s, residual 0.047071, 200 iterations)
166.796786
52.104446
27.353480
17.461956
12.368776
9.346810
7.382413
6.021266
5.032470
4.287525
3.709818
3.251127
2.879746
2.574056
2.318868
2.103225
1.919051
1.760271
1.622241
1.501352
1.394765
1.300220
1.215893
1.140304
1.072234
1.010677
0.954793
0.903875
0.857327
0.814642
0.775385
0.739183
0.705713
0.674694
0.645883
0.619066
0.594054
0.570683
0.548804
0.528289
0.509021
0.490896
0.473822
0.457715
0.442500
0.428111
0.414484
0.401565
0.389304
0.377654
0.366574
0.356025
0.345973
0.336385
0.327232
0.318486
0.310123
0.302120
0.294455
0.287109
0.280064
0.273302
0.266807
0.260566
0.254565
0.248790
0.243231
0.237875
0.232713
0.227735
0.222932
0.218296
0.213818
0.209491
0.205308
0.201263
0.197348
0.193559
0.189890
0.186335
0.182890
0.179549
0.176309
0.173165
0.170114
0.167151
0.164273
0.161477
0.158759
0.156117
0.153547
0.151047
0.148614
0.146246
0.143939
0.141693
0.139505
0.137372
0.135293
0.133267
0.131290
0.129361
0.127480
0.125643
0.123850
0.122100
0.120390
0.118720
0.117088
0.115493
0.113934
0.112410
0.110919
0.109461
0.108035
0.106640
0.105274
0.103937
0.102628
0.101347
0.100092
0.098862
0.097658
0.096478
0.095321
0.094187
0.093076
0.091986
0.090918
0.089869
0.088841
0.087833
0.086843
0.085872
0.084918
0.083983
0.083064
0.082162
0.081276
0.080406
0.079551
0.078712
0.077887
0.077076
0.076279
0.075496
0.074727
0.073970
0.073226
0.072494
0.071775
0.071067
0.070371
0.069686
0.069012
0.068349
0.067696
0.067054
0.066422
0.065800
0.065187
0.064584
0.063990
0.063405
0.062829
0.062262
0.061703
0.061152
0.060610
0.060076
0.059549
0.059030
0.058519
0.058014
0.057518
0.057028
0.056545
0.056068
0.055599
0.055136
0.054679
0.054229
0.053785
0.053346
0.052914
0.052488
0.052067
0.051652
0.051242
0.050838
0.050439
0.050045
0.049656
0.049273
0.048894
0.048520
0.048151
0.047786
0.047426
0.047071
 3200; 2.754; 8181.159
vtune: Collection stopped.
vtune: Using result path `/dss/dsshome1/0E/h039vac/heatdir/VtuneData/PerformanceSnapshot'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-808169-i01r01c01s01.sc' vtune: Executing actions 12 % Loading 'systemcollector-808169-i01r01c01s01.sc' vtune: Executing actions 12 % Loading '808179.stat.perf' file                  vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving thread name information                vtune: Executing actions 21 % Resolving thread name information                vtune: Executing actions 21 % Resolving call target names for dynamic code     vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 24 % Resolving interrupt name information             vtune: Executing actions 26 % Resolving interrupt name information             vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 31 % Preparing output tree                            vtune: Executing actions 31 % Parsing columns in input tree                    vtune: Executing actions 32 % Parsing columns in input tree                    vtune: Executing actions 32 % Creating top-level columns                       vtune: Executing actions 32 % Creating top-level rows                          vtune: Executing actions 33 % Creating top-level rows                          vtune: Executing actions 33 % Preparing output tree                            vtune: Executing actions 33 % Parsing columns in input tree                    vtune: Executing actions 33 % Creating top-level columns                       vtune: Executing actions 34 % Creating top-level columns                       vtune: Executing actions 34 % Creating top-level rows                          vtune: Executing actions 35 % Creating top-level rows                          vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 3.026s
    IPC: 1.493
    SP GFLOPS: 0.000
    DP GFLOPS: 5.296
    x87 GFLOPS: 0.000
    Average CPU Frequency: 2.295 GHz 
Logical Core Utilization: 1.0% (0.995 out of 96)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization. Consider improving physical core utilization as the first step
 | and then look at opportunities to utilize logical cores, which in some cases
 | can improve processor throughput and overall performance of multi-threaded
 | applications.
 |
    Physical Core Utilization: 2.1% (0.995 out of 48)
     | The metric value is low, which may signal a poor physical CPU cores
     | utilization caused by:
     |     - load imbalance
     |     - threading runtime overhead
     |     - contended synchronization
     |     - thread/process underutilization
     |     - incorrect affinity that utilizes logical cores instead of physical
     |       cores
     | Run the HPC Performance Characterization analysis to estimate the
     | efficiency of MPI and OpenMP parallelism or run the Locks and Waits
     | analysis to identify parallel bottlenecks for other parallel runtimes.
     |
Microarchitecture Usage: 40.7% of Pipeline Slots
 | You code efficiency on this platform is too low.
 | 
 | Possible cause: memory stalls, instruction starvation, branch misprediction
 | or long latency instructions.
 | 
 | Next steps: Run Microarchitecture Exploration analysis to identify the cause
 | of the low microarchitecture usage efficiency.
 |
    Retiring: 40.7% of Pipeline Slots
    Front-End Bound: 4.6% of Pipeline Slots
    Bad Speculation: 1.5% of Pipeline Slots
    Back-End Bound: 53.1% of Pipeline Slots
     | A significant portion of pipeline slots are remaining empty. When
     | operations take too long in the back-end, they introduce bubbles in the
     | pipeline that ultimately cause fewer pipeline slots containing useful
     | work to be retired per cycle than the machine is capable to support. This
     | opportunity cost results in slower execution. Long-latency operations
     | like divides and memory operations can cause this, as can too many
     | operations being directed to a single execution port (for example, more
     | multiply operations arriving in the back-end per cycle than the execution
     | unit can support).
     |
        Memory Bound: 31.9% of Pipeline Slots
         | The metric value is high. This can indicate that the significant
         | fraction of execution pipeline slots could be stalled due to demand
         | memory load and stores. Use Memory Access analysis to have the metric
         | breakdown by memory hierarchy, memory bandwidth information,
         | correlation by memory objects.
         |
            L1 Bound: 5.5% of Clockticks
                FB Full: 100.0% of Clockticks
            L2 Bound: 8.8% of Clockticks
             | This metric shows how often machine was stalled on L2 cache.
             | Avoiding cache misses (L1 misses/L2 hits) will improve the
             | latency and increase performance.
             |
            L3 Bound: 0.6% of Clockticks
                L3 Latency: 1.5% of Clockticks
            DRAM Bound: 18.9% of Clockticks
             | This metric shows how often CPU was stalled on the main memory
             | (DRAM). Caching typically improves the latency and increases
             | performance.
             |
                Memory Bandwidth: 58.5% of Clockticks
                 | Issue: A significant fraction of cycles was stalled due to
                 | approaching bandwidth limits of the main memory (DRAM).
                 | 
                 | Tips: Improve data accesses to reduce cacheline transfers
                 | from/to memory using these possible techniques:
                 |     - Consume all bytes of each cacheline before it is
                 |       evicted (for example, reorder structure elements and
                 |       split non-hot ones).
                 |     - Merge compute-limited and bandwidth-limited loops.
                 |     - Use NUMA optimizations on a multi-socket system.
                 | 
                 | Note: software prefetches do not help a bandwidth-limited
                 | application.
                 |
                Memory Latency: 21.1% of Clockticks
                 | Issue: A significant fraction of cycles was stalled due to
                 | the latency of the main memory (DRAM).
                 | 
                 | Tips: Improve data accesses or interleave them with compute
                 | using such possible techniques as data layout re-structuring
                 | or software prefetches (through the compiler).
                 |
                    Local DRAM: 100.0% of Clockticks
                     | The number of CPU stalls on loads from the local memory
                     | exceeds the threshold. Consider caching data to improve
                     | the latency and increase the performance.
                     |
                    Remote DRAM: 0.0% of Clockticks
                    Remote Cache: 0.0% of Clockticks
            Store Bound: 0.4% of Clockticks
        Core Bound: 21.3% of Pipeline Slots
         | This metric represents how much Core non-memory issues were of a
         | bottleneck. Shortage in hardware compute resources, or dependencies
         | software's instructions are both categorized under Core Bound. Hence
         | it may indicate the machine ran out of an OOO resources, certain
         | execution units are overloaded or dependencies in program's data- or
         | instruction- flow are limiting the performance (e.g. FP-chained long-
         | latency arithmetic operations).
         |
Memory Bound: 31.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 14.9% of Clockticks
    DRAM Bound: 18.9% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
     | The code is memory bandwidth bound, which means that there are a
     | significant fraction of cycles during which the bandwidth limits of the
     | main memory are being reached and the code could stall. Review the
     | Bandwidth Utilization Histogram to estimate the scale of the issue.
     | Improve data accesses to reduce cacheline transfers from/to memory using
     | these possible techniques: 1) consume all bytes of each cacheline before
     | it is evicted (for example, reorder structure elements and split non-hot
     | ones); 2) merge compute-limited and bandwidth-limited loops; 3) use NUMA
     | optimizations on a multi-socket system.
     |
     | The code is latency bound, which means that there are a significant
     | fraction of cycles during which the code could be stalled due to main
     | memory latency. Consider optimizing data layout or using software
     | prefetches through the compiler to improve cache reuse and to reduce the
     | data fetched from the main memory.
     |
        Average DRAM Bandwidth, GB/s: 0.000
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 99.5% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
                512-bit: 0.0% from SP FP
            Scalar: 100.0% from SP FP
             | This code has floating point operations and is not vectorized.
             | Consider either recompiling the code with optimization options
             | that allow vectorization or using Intel Advisor to vectorize the
             | loops.
             |
        DP FLOPs: 35.7% of uOps
            Packed: 99.5% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 99.5% from DP FP
                 | A significant fraction of floating point arithmetic vector
                 | instructions executed with a partial vector load. You can try
                 | to compile the code with the latest instruction set or use
                 | Intel Advisor for vectorization help.
                 |
                512-bit: 0.0% from DP FP
            Scalar: 0.5% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 64.3% of uOps
    FP Arith/Mem Rd Instr. Ratio: 1.366
    FP Arith/Mem Wr Instr. Ratio: 5.619
Collection and Platform Info
    Application Command Line: ./heat "test.dat" 
    Operating System: 5.3.18-150300.59.63-default NAME="SLES" VERSION="15-SP3" VERSION_ID="15.3" PRETTY_NAME="SUSE Linux Enterprise Server 15 SP3" ID="sles" ID_LIKE="suse" ANSI_COLOR="0;32" CPE_NAME="cpe:/o:suse:sles:15:sp3" DOCUMENTATION_URL="https://documentation.suse.com/"
    Computer Name: i01r01c01s01
    Result Size: 3.7 MB 
    Collection start time: 18:49:31 03/05/2024 UTC
    Collection stop time: 18:49:34 03/05/2024 UTC
    Collector Type: Driverless Perf per-process counting
    CPU
        Name: Intel(R) Xeon(R) Processor code named Skylake
        Frequency: 2.694 GHz 
        Logical CPU Count: 96
        Max DRAM Single-Package Bandwidth: 114.000 GB/s
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

Recommendations:
    Hotspots: Start with Hotspots analysis to understand the efficiency of your algorithm.
     | Use Hotspots analysis to identify the most time consuming functions.
     | Drill down to see the time spent on every line of code.
    Threading: There is poor utilization of logical CPU cores (1.0%) in your application.
     |  Use Threading to explore more opportunities to increase parallelism in
     | your application.
    Memory Access: The Memory Bound metric is high  (31.9%). A significant fraction of execution pipeline slots could be stalled due to demand memory load and stores.
     | Use Memory Access analysis to measure metrics that can identify memory
     | access issues.
    Microarchitecture Exploration: There is low microarchitecture usage (40.7%) of available hardware resources.
     | Run Microarchitecture Exploration analysis to analyze CPU
     | microarchitecture bottlenecks that can affect application performance.

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
