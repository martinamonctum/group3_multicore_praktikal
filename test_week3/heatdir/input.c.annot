//
// ------- Annotated listing with optimization reports for "/dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c" -------
//
//Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.4.0 Build 20210910_000000
//
//Compiler options: -I/dss/lrzsys/sys/spack/release/22.2.1/opt/skylake_avx512/papi/6.0.0.1-intel-pf2m6io/include -O3 -xhost -fno-alias -qopt-report-annotate -qopt-report=5 -c -o input.o
//  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
//  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
//  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false
//
//INLINING OPTION VALUES:
//  -inline-factor: 100
//  -inline-min-size: 30
//  -inline-max-size: 230
//  -inline-max-total-size: 2000
//  -inline-max-per-routine: 10000
//  -inline-max-per-compile: 500000
//
//In the inlining report below:
//   "sz" refers to the "size" of the routine. The smaller a routine's size,
//      the more likely it is to be inlined.
//   "isz" refers to the "inlined size" of the routine. This is the amount
//      the calling routine will grow if the called routine is inlined into it.
//      The compiler generally limits the amount a routine can grow by having
//      routines inlined into it.
1	//
2	// input.c
3	// 
4	
5	#include <stdio.h>
6	#include <stdlib.h>
7	
8	#include "input.h"
9	
10	#define BUFSIZE 100
11	
12	int read_input( FILE *infile, algoparam_t *param )
13	{
//INLINE REPORT: (read_input(FILE *, algoparam_t *)) [1/2=50.0%] /dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c(13,1)
//  -> EXTERN: (17,3) fgets(char *__restrict__, int, FILE *__restrict__)
//  -> EXTERN: (18,7) sscanf(const char *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (22,3) fgets(char *__restrict__, int, FILE *__restrict__)
//  -> EXTERN: (23,7) sscanf(const char *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (27,3) fgets(char *__restrict__, int, FILE *__restrict__)
//  -> EXTERN: (28,7) sscanf(const char *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (32,3) fgets(char *__restrict__, int, FILE *__restrict__)
//  -> EXTERN: (33,7) sscanf(const char *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (38,3) fgets(char *__restrict__, int, FILE *__restrict__)
//  -> EXTERN: (39,7) sscanf(const char *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (43,3) fgets(char *__restrict__, int, FILE *__restrict__)
//  -> EXTERN: (44,7) sscanf(const char *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (49,18) malloc(size_t)
//  -> EXTERN: (53,7) fgets(char *__restrict__, int, FILE *__restrict__)
//  -> EXTERN: (54,11) sscanf(const char *__restrict__, const char *__restrict__, ...)
//
///dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c(13,1):remark #34051: REGISTER ALLOCATION : [read_input] /dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c:13
//
//    Hardware registers
//        Reserved     :    2[ rsp rip]
//        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
//        Callee-save  :    6[ rbx rbp r12-r15]
//        Assigned     :   12[ rax rdx rcx rsi rdi r8-r10 r12-r15]
//        
//    Routine temporaries
//        Total         :     106
//            Global    :      29
//            Local     :      77
//        Regenerable   :      47
//        Spilled       :       4
//        
//    Routine stack
//        Variables     :     100 bytes*
//            Reads     :       0 [0.00e+00 ~ 0.0%]
//            Writes    :       0 [0.00e+00 ~ 0.0%]
//        Spills        :      16 bytes*
//            Reads     :       4 [1.78e-05 ~ 0.0%]
//            Writes    :       2 [1.78e-05 ~ 0.0%]
//    
//    Notes
//    
//        *Non-overlapping variables and spills may share stack space,
//         so the total stack size might be less than this.
//    
//
14	  int i, n;
15	  char buf[BUFSIZE];
16	
17	  fgets(buf, BUFSIZE, infile);
18	  n = sscanf( buf, "%u", &(param->maxiter) );
19	  if( n!=1 )
20	    return 0;
21	
22	  fgets(buf, BUFSIZE, infile);
23	  n = sscanf( buf, "%u", &(param->initial_res) );
24	  if( n!=1 )
25	    return 0;
26	
27	  fgets(buf, BUFSIZE, infile);
28	  n = sscanf( buf, "%u", &(param->max_res) );
29	  if( n!=1 )
30	    return 0;
31	
32	  fgets(buf, BUFSIZE, infile);
33	  n = sscanf( buf, "%u", &(param->res_step_size) );
34	  if( n!=1 )
35	    return 0;
36	
37	
38	  fgets(buf, BUFSIZE, infile);
39	  n = sscanf(buf, "%d", &(param->algorithm) );
40	  if( n!=1 )
41	    return 0;
42	
43	  fgets(buf, BUFSIZE, infile);
44	  n = sscanf(buf, "%u", &(param->numsrcs) );
45	  if( n!=1 )
46	    return 0;
47	
48	  (param->heatsrcs) = 
49	    (heatsrc_t*) malloc( sizeof(heatsrc_t) * (param->numsrcs) );
50	  
51	  for( i=0; i<param->numsrcs; i++ )
//
//LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c(51,3)
//   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
//LOOP END
52	    {
53	      fgets(buf, BUFSIZE, infile);
54	      n = sscanf( buf, "%f %f %f %f",
55			  &(param->heatsrcs[i].posx),
56			  &(param->heatsrcs[i].posy),
57			  &(param->heatsrcs[i].range),
58			  &(param->heatsrcs[i].temp) );
59	
60	      if( n!=4 )
61		return 0;
62	    }
63	
64	  return 1;
65	}
66	
67	
68	void print_params( algoparam_t *param )
69	{
//INLINE REPORT: (print_params(algoparam_t *)) [2/2=100.0%] /dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c(69,1)
//  -> EXTERN: (72,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (76,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (77,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (80,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
//  -> EXTERN: (84,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
//
///dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c(69,1):remark #34051: REGISTER ALLOCATION : [print_params] /dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c:69
//
//    Hardware registers
//        Reserved     :    2[ rsp rip]
//        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
//        Callee-save  :    6[ rbx rbp r12-r15]
//        Assigned     :   13[ rax rdx rcx rsi rdi r8 r12-r14 zmm0-zmm3]
//        
//    Routine temporaries
//        Total         :      65
//            Global    :      10
//            Local     :      55
//        Regenerable   :      17
//        Spilled       :       3
//        
//    Routine stack
//        Variables     :       0 bytes*
//            Reads     :       0 [0.00e+00 ~ 0.0%]
//            Writes    :       0 [0.00e+00 ~ 0.0%]
//        Spills        :      16 bytes*
//            Reads     :       2 [1.03e+00 ~ 1.0%]
//            Writes    :       2 [1.03e+00 ~ 1.0%]
//    
//    Notes
//    
//        *Non-overlapping variables and spills may share stack space,
//         so the total stack size might be less than this.
//    
//
70	  int i;
71	
72	  fprintf(stderr, "Resolutions       : (%u, %u, ... %u)\n",
73		  param->initial_res,
74		  param->initial_res + param->res_step_size,
75		  param->max_res);
76	  fprintf(stderr, "Iterations        : %u\n", param->maxiter);
77	  fprintf(stderr, "Algorithm         : %d (%s)\n",
78		  param->algorithm,
79		  (param->algorithm == 0) ? "Jacobi":"Gauss-Jacobi" );
80	  fprintf(stderr, "Num. Heat sources : %u\n", param->numsrcs);
81	
82	  for( i=0; i<param->numsrcs; i++ )
//
//LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/input.c(82,3)
//   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
//   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
//LOOP END
83	    {
84	      fprintf(stderr, "  %2d: (%2.2f, %2.2f) %2.2f %2.2f \n",
85		     i+1,
86		     param->heatsrcs[i].posx,
87		     param->heatsrcs[i].posy,
88		     param->heatsrcs[i].range,
89		     param->heatsrcs[i].temp );
90	    }
91	}
