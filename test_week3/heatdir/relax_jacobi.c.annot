//
// ------- Annotated listing with optimization reports for "/dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c" -------
//
//Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.4.0 Build 20210910_000000
//
//Compiler options: -I/dss/lrzsys/sys/spack/release/22.2.1/opt/skylake_avx512/papi/6.0.0.1-intel-pf2m6io/include -O3 -xhost -fno-alias -qopt-report-annotate -qopt-report=5 -c -o relax_jacobi.o
//  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
//  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
//  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false
//
//INLINING OPTION VALUES:
//  -inline-factor: 100
//  -inline-min-size: 30
//  -inline-max-size: 230
//  -inline-max-total-size: 2000
//  -inline-max-per-routine: 10000
//  -inline-max-per-compile: 500000
//
//In the inlining report below:
//   "sz" refers to the "size" of the routine. The smaller a routine's size,
//      the more likely it is to be inlined.
//   "isz" refers to the "inlined size" of the routine. This is the amount
//      the calling routine will grow if the called routine is inlined into it.
//      The compiler generally limits the amount a routine can grow by having
//      routines inlined into it.
1	/*
2	 * relax_jacobi.c
3	 *
4	 * Jacobi Relaxation
5	 *
6	 */
7	
8	#include "heat.h"
9	
10	/*
11	 * Residual (length of error vector)
12	 * between current solution and next after a Jacobi step
13	 */
14	
15	double relax_jacobi(double *u, double *utmp, unsigned sizex, unsigned sizey) {
//INLINE REPORT: (relax_jacobi(double *, double *, unsigned int, unsigned int)) [1/1=100.0%] /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(15,78)
//
///dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(15,78):remark #34051: REGISTER ALLOCATION : [relax_jacobi] /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c:15
//
//    Hardware registers
//        Reserved     :    2[ rsp rip]
//        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
//        Callee-save  :    6[ rbx rbp r12-r15]
//        Assigned     :   31[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15 k1]
//        
//    Routine temporaries
//        Total         :     150
//            Global    :      49
//            Local     :     101
//        Regenerable   :       5
//        Spilled       :      16
//        
//    Routine stack
//        Variables     :       0 bytes*
//            Reads     :       0 [0.00e+00 ~ 0.0%]
//            Writes    :       0 [0.00e+00 ~ 0.0%]
//        Spills        :     112 bytes*
//            Reads     :      15 [1.53e+00 ~ 1.5%]
//            Writes    :      14 [6.01e-01 ~ 0.6%]
//    
//    Notes
//    
//        *Non-overlapping variables and spills may share stack space,
//         so the total stack size might be less than this.
//    
//
16		unsigned i, j;
17		double sum;
18	
19		for (j = 1; j < sizex - 1; j++) {
20			for (i = 1; i < sizey - 1; i++) {
//
//LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(20,3)
//   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
//   remark #15542: loop was not vectorized: inner loop was already vectorized   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(20,3) ]
//
//   LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(19,2)
//   <Peeled loop for vectorization>
//      remark #15389: vectorization support: reference u[i*sizex+j-1] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(21,26) ]
//      remark #15389: vectorization support: reference u[i*sizex+j+1] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(22,9) ]
//      remark #15389: vectorization support: reference u[(i-1)*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(23,9) ]
//      remark #15389: vectorization support: reference u[(i+1)*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(24,9) ]
//      remark #15389: vectorization support: reference u[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(26,25) ]
//      remark #15389: vectorization support: reference utmp[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(29,4) ]
//      remark #15381: vectorization support: unaligned access used inside loop body
//      remark #15305: vectorization support: vector length 4
//      remark #15309: vectorization support: normalized vectorization overhead 0.647
//      remark #15355: vectorization support: sum is double type reduction   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(17,2) ]
//      remark #15301: PEEL LOOP WAS VECTORIZED
//      remark #15450: unmasked unaligned unit stride loads: 1 
//      remark #15451: unmasked unaligned unit stride stores: 1 
//      remark #15475: --- begin vector cost summary ---
//      remark #15476: scalar cost: 5 
//      remark #15477: vector cost: 1.500 
//      remark #15478: estimated potential speedup: 2.500 
//      remark #15488: --- end vector cost summary ---
//   LOOP END
//
//   LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(19,2)
//      remark #15389: vectorization support: reference u[i*sizex+j-1] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(21,26) ]
//      remark #15389: vectorization support: reference u[i*sizex+j+1] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(22,9) ]
//      remark #15389: vectorization support: reference u[(i-1)*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(23,9) ]
//      remark #15389: vectorization support: reference u[(i+1)*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(24,9) ]
//      remark #15389: vectorization support: reference u[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(26,25) ]
//      remark #15389: vectorization support: reference utmp[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(29,4) ]
//      remark #15381: vectorization support: unaligned access used inside loop body
//      remark #15305: vectorization support: vector length 4
//      remark #15309: vectorization support: normalized vectorization overhead 0.935
//      remark #15355: vectorization support: sum is double type reduction   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(17,2) ]
//      remark #15301: PERMUTED LOOP WAS VECTORIZED
//      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
//      remark #15450: unmasked unaligned unit stride loads: 5 
//      remark #15451: unmasked unaligned unit stride stores: 1 
//      remark #15475: --- begin vector cost summary ---
//      remark #15476: scalar cost: 29 
//      remark #15477: vector cost: 7.750 
//      remark #15478: estimated potential speedup: 3.550 
//      remark #15488: --- end vector cost summary ---
//   LOOP END
//
//   LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(19,2)
//   <Remainder loop for vectorization>
//      remark #15389: vectorization support: reference u[i*sizex+j-1] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(21,26) ]
//      remark #15389: vectorization support: reference u[i*sizex+j+1] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(22,9) ]
//      remark #15389: vectorization support: reference u[(i-1)*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(23,9) ]
//      remark #15389: vectorization support: reference u[(i+1)*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(24,9) ]
//      remark #15389: vectorization support: reference u[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(26,25) ]
//      remark #15389: vectorization support: reference utmp[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(29,4) ]
//      remark #15381: vectorization support: unaligned access used inside loop body
//      remark #15305: vectorization support: vector length 4
//      remark #15309: vectorization support: normalized vectorization overhead 0.647
//      remark #15355: vectorization support: sum is double type reduction   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(17,2) ]
//      remark #15301: REMAINDER LOOP WAS VECTORIZED
//      remark #15450: unmasked unaligned unit stride loads: 1 
//      remark #15451: unmasked unaligned unit stride stores: 1 
//      remark #15475: --- begin vector cost summary ---
//      remark #15476: scalar cost: 5 
//      remark #15477: vector cost: 1.500 
//      remark #15478: estimated potential speedup: 2.500 
//      remark #15488: --- end vector cost summary ---
//   LOOP END
//LOOP END
21				double unew = 0.25 * (u[i * sizex + (j - 1)] +  // left
22									u[i * sizex + (j + 1)] +  // right
23									u[(i - 1) * sizex + j] +  // top
24									u[(i + 1) * sizex + j]);  // bottom
25	
26				double diff = unew - u[i * sizex + j];
27				sum += diff * diff;
28	
29				utmp[i * sizex + j] = unew;
30			}
31		}
32		for (j = 1; j < sizex - 1; j++) {
///dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(32,2):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
///dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(32,2):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
///dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(32,2):remark #34026: call to memcpy implemented as a call to optimized library version
33			for (i = 1; i < sizey - 1; i++) {
//
//LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(33,3)
//   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
//   remark #15542: loop was not vectorized: inner loop was already vectorized   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(33,3) ]
//
//   LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(32,2)
//      remark #25399: memcopy generated
//      remark #15542: loop was not vectorized: inner loop was already vectorized
//
//      LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(32,2)
//         remark #15389: vectorization support: reference u[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(34,4) ]
//         remark #15389: vectorization support: reference utmp[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(34,23) ]
//         remark #15381: vectorization support: unaligned access used inside loop body
//         remark #15305: vectorization support: vector length 4
//         remark #15309: vectorization support: normalized vectorization overhead 1.000
//         remark #15301: PERMUTED LOOP WAS VECTORIZED
//         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
//         remark #15450: unmasked unaligned unit stride loads: 1 
//         remark #15451: unmasked unaligned unit stride stores: 1 
//         remark #15475: --- begin vector cost summary ---
//         remark #15476: scalar cost: 5 
//         remark #15477: vector cost: 1.500 
//         remark #15478: estimated potential speedup: 2.500 
//         remark #15488: --- end vector cost summary ---
//         remark #25015: Estimate of max trip count of loop=3
//      LOOP END
//
//      LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(32,2)
//      <Remainder loop for vectorization>
//         remark #15389: vectorization support: reference u[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(34,4) ]
//         remark #15389: vectorization support: reference utmp[i*sizex+j] has unaligned access   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/relax_jacobi.c(34,23) ]
//         remark #15381: vectorization support: unaligned access used inside loop body
//         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
//         remark #15305: vectorization support: vector length 2
//         remark #15309: vectorization support: normalized vectorization overhead 1.133
//         remark #15450: unmasked unaligned unit stride loads: 1 
//         remark #15451: unmasked unaligned unit stride stores: 1 
//         remark #15475: --- begin vector cost summary ---
//         remark #15476: scalar cost: 5 
//         remark #15477: vector cost: 1.500 
//         remark #15478: estimated potential speedup: 2.500 
//         remark #15488: --- end vector cost summary ---
//         remark #25015: Estimate of max trip count of loop=12
//      LOOP END
//   LOOP END
//LOOP END
34				u[i * sizex + j] = utmp[i * sizex + j];
35			}
36		}
37		return sum;
38	}
39	
40	
41		//THIS IS WRONG!!!
42		// float *u = unew;
43		// unew = diff;
44		// diff = *u;
45	
46		// copy from utmp to u
47		
48		//copies the utmp to u, doesnt do anything
49		//AVOID THIS!!!!!!!
50		// for (j = 1; j < sizex - 1; j++) {
51			
52		// 	for (i = 1; i < sizey - 1; i++) {
53		// 		u[i * sizex + j] = utmp[i * sizex + j];
54		// 	}
55		// }