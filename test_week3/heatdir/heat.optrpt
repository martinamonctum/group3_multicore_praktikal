Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.4.0 Build 20210910_000000

Compiler options: -I/dss/lrzsys/sys/spack/release/22.2.1/opt/skylake_avx512/papi/6.0.0.1-intel-pf2m6io/include -O3 -xhost -fno-alias -qopt-report-annotate -qopt-report=5 -c -o heat.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/2=50.0%] /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(23,34)
  -> INLINE: (42,3) usage(char *) (isz = 4) (sz = 9)
    -> EXTERN: (20,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (47,17) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (48,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (50,3) usage(char *) (isz = 4) (sz = 9)
    -> EXTERN: (20,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (57,18) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (58,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (60,3) usage(char *) (isz = 4) (sz = 9)
    -> EXTERN: (20,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (65,7) read_input(FILE *, algoparam_t *)
  -> EXTERN: (66,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (68,3) usage(char *) (isz = 4) (sz = 9)
    -> EXTERN: (20,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (72,2) print_params(algoparam_t *)
  -> EXTERN: (110,4) finalize(algoparam_t *)
  -> EXTERN: (112,8) initialize(algoparam_t *)
  -> EXTERN: (113,4) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (115,4) usage(char *) (isz = 4) (sz = 9)
    -> EXTERN: (20,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (118,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (124,13) wtime()
  -> EXTERN: (128,12) PAPI_hl_region_begin(const char *)
  -> EXTERN: (130,4) printf(const char *__restrict__, ...)
  -> EXTERN: (136,11) PAPI_get_real_usec(void)
  -> EXTERN: (145,16) relax_jacobi(double *, double *, unsigned int, unsigned int)
  -> EXTERN: (147,5) printf(const char *__restrict__, ...)
  -> EXTERN: (152,5) relax_gauss(double *, unsigned int, unsigned int)
  -> EXTERN: (153,16) residual_gauss(double *, double *, unsigned int, unsigned int)
  -> EXTERN: (170,12) PAPI_hl_region_end(const char *)
  -> EXTERN: (172,4) printf(const char *__restrict__, ...)
  -> EXTERN: (188,11) PAPI_get_real_usec(void)
  -> EXTERN: (194,13) wtime()
  -> EXTERN: (196,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (197,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (198,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (199,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (220,21) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (223,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (224,9) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (225,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (226,3) printf(const char *__restrict__, ...)
  -> EXTERN: (228,2) fclose(FILE *)
  -> EXTERN: (230,2) coarsen(double *, unsigned int, unsigned int, double *, unsigned int, unsigned int)
  -> EXTERN: (231,2) write_image(FILE *, double *, unsigned int, unsigned int)
  -> EXTERN: (233,2) finalize(algoparam_t *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(109,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(138,3)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(222,2)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(223,3) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(224,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(225,3) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(226,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (223:3) and call:printf(const char *__restrict__, ...) (226:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (226:3) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (223:3)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

    Report from: Code generation optimizations [cg]

/dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(23,34):remark #34051: REGISTER ALLOCATION : [main] /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     255
            Global    :      63
            Local     :     192
        Regenerable   :      94
        Spilled       :      16
        
    Routine stack
        Variables     :   28076 bytes*
            Reads     :      25 [1.41e+01 ~ 14.1%]
            Writes    :      11 [9.54e-02 ~ 0.1%]
        Spills        :      88 bytes*
            Reads     :      16 [7.03e+00 ~ 7.0%]
            Writes    :      16 [7.04e+00 ~ 7.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(char *)) [2/2=100.0%] /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(19,21)
  -> EXTERN: (20,2) fprintf(FILE *__restrict__, const char *__restrict__, ...)


    Report from: Code generation optimizations [cg]

/dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c(19,21):remark #34051: REGISTER ALLOCATION : [usage] /dss/dsshome1/05/h039vak/Assignment1/heatdir/heat.c:19

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
